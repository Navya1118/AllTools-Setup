JENKINS INSTALLATION -----------------
Step 1 : Launch instance
Step 2 : Install java (Dependency)
Step 3 : sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
         sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
Step 4 : yum install jenkins -y
         sudo systemctl status jenkins
         sudo systemctl start jenkins
         sudo systemctl enable jenkins

JENKINS SETUP-------------------------

Step 1 : Copy PUBLIC IP ADDRESS with port - 8080(Default port number)
Step 2 : unlock jenkins(password)
         (path : /var/lib/jenkins/intialAdminPassword)

____________________________________________________________________________________________________________________________________________

TOMCAT SETUP-----------------------------
Step 1 : Launch instance
Step 2: Go to dlcdn apache website/tomcat/tomcat9/ latest version/bin/apache-tomcat-9.0.85.tar.gz
Step 3 : Wget apache-tomcat-9.0.85.tar.gz (Install)
Step 4 : Unzip file (tar xvzf apache-tomcat-9.0.85.tar.gz)
step 5 : Rename it (tomcat)
step 6 : Go to  cd tomcat/conf/server.xml/--For any changes like port number  or something 
Step 7 : install java (DEPENDENCY) yum install java -y 
Step 8 : sh startup.sh
       TOMCAT STARTED 
ACCESS WITH PUBLIC IP ADDRESS with port 8080

Manager
ERROR : Access Deni [Login Purpose]
find / -name context.xml
vim /root/apache-tomcat-9.0.85/webapps/host-manager/META-INF/context.xml
edit <!-- <volve            
                                           />   -->
vim /root/apache-tomcat-9.0.85/webapps/manager/META-INF/context.xml
edit <!-- <volve            
                                           />   -->
cd bin/
./shutdown
./startup

Goto  cd conf/ cat tomcat-users.xml /-------------------------------





____________________________________________________________________________________________________________________________________________________

SONAR QUBE SETUP/CONFIGURE-------------------------------------

apt install unzip
adduser sonarqube
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.4.0.54424.zip
unzip *
chmod -R 755 /home/sonarqube/sonarqube-9.4.0.54424
chown -R sonarqube:sonarqube /home/sonarqube/sonarqube-9.4.0.54424
cd sonarqube-9.4.0.54424/bin/linux-x86-64/
./sonar.sh start

______________________________________________________________________________________________________________________________________________

    KUBERNATES INSTALLATION & CONGIGURATION ---------------------With OUTPUT
_____________________________________________________________________________________________________________________________________________________________________
    
    1  yum install docker -y
    2  service docker start
    3  systemctl enable docker
    4  vim /etc/yum.repos.d/kubernetes.repo

[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


    5  yum install kubelet-1.20.0  kubeadm-1.20.0  kubectl-1.20.0  kubernetes-cni
    6  systemctl restart docker && systemctl enable docker && systemctl  restart kubelet && systemctl enable kubelet
    7  kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=172.31.95.31

       mkdir -p $HOME/.kube
       sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
       sudo chown $(id -u):$(id -g) $HOME/.kube/config
       export KUBECONFIG=/etc/kubernetes/admin.conf

   12  kubectl get nodes
   13  alias k='kubectl'
   14  k get no
   15  k get nodes
   16  k get po
   17  k get po --all-namespaces
   18  curl https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/canal.yaml -O
       kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 
       kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml 
   21  k get po --all-namespaces
   22  k get nodes
   23  kubectl create deployment c1 --image navya1118/my-nginx
       kubectl create deployment c1 --image navya1118/my-nginx --dry-run=client -o yaml
       kubectl create deployment c1 --image navya1118/my-nginx --dry-run=client -o yaml > mynginx.yaml
   27  cat mynginx.yaml 
   28  ls
   29  k apply -f mynginx.yaml 
   30  k get deployment
   31  k expose deployment c1 --type=NodePort --port 80
   32  k get service
   
     history
................................................................................................................................
ANSIBLE (MASTER_SLAVE)-------setup
..............................................................................................................................
Ansible install - amazon-linux-extras install ansible2 -y
Python install  -  yum install python python-pip -y
Add user        -   useradd ansible
Password-set    -   passwd ansible
Root=ansible    -   visudo--100th line -copy/print { root            ALL=(ALL)       ALL
                                                     ansible          ALL=(ALL)      NOPASSWD:   ALL }
Password        -   vi /etc/ssh/sshd_config (63rd line password authentication-Yes) 
authentication 
Restart         -   systemctl restart sshd

CONNECTION-----------------------------

Goto ansible user   -    su - ansible
Genenate key using  -    ssh-keygen/cd .ssh/
connect server using -   ssh-copy-id ansible@65.3.78.108
                         ssh ansible@65.3.78.108
EXIT
cd /etc/ansible --- ll--ansible_config(uncomment inventory and root)
vim hosts----- COPY IPADDRESS of other server here

COMPLETE CONNECTION
............................................................................................................................................


